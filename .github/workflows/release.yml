name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug environment variables
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          echo "=== DEBUGGING SIGNING SETUP ==="
          echo "TAURI_SIGNING_PRIVATE_KEY length: ${#TAURI_SIGNING_PRIVATE_KEY}"
          echo "TAURI_SIGNING_PRIVATE_KEY_PASSWORD length: ${#TAURI_SIGNING_PRIVATE_KEY_PASSWORD}"
          echo "First 50 chars of key: ${TAURI_SIGNING_PRIVATE_KEY:0:50}..."
          echo "Key ends with: ...${TAURI_SIGNING_PRIVATE_KEY: -20}"
          echo "Password is set: $([ -n "$TAURI_SIGNING_PRIVATE_KEY_PASSWORD" ] && echo "YES" || echo "NO")"
          
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm install

      - name: Debug and clean private key
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        run: |
          echo "=== COMPREHENSIVE KEY ANALYSIS ==="
          echo "Key length: ${#TAURI_SIGNING_PRIVATE_KEY}"
          echo "Password length: ${#TAURI_SIGNING_PRIVATE_KEY_PASSWORD}"
          
          echo "=== RAW KEY INSPECTION ==="
          echo "First 100 chars: ${TAURI_SIGNING_PRIVATE_KEY:0:100}"
          echo "Last 50 chars: ${TAURI_SIGNING_PRIVATE_KEY: -50}"
          
          echo "=== CHARACTER ANALYSIS AROUND OFFSET 464 ==="
          if [ ${#TAURI_SIGNING_PRIVATE_KEY} -gt 470 ]; then
            echo "Characters 460-470:"
            echo "${TAURI_SIGNING_PRIVATE_KEY:460:10}" | od -c
            echo "Characters as hex:"
            echo "${TAURI_SIGNING_PRIVATE_KEY:460:10}" | xxd
          fi
          
          echo "=== LOOKING FOR EMBEDDED NEWLINES ==="
          echo "Checking for \\n characters in key:"
          echo "$TAURI_SIGNING_PRIVATE_KEY" | grep -o $'\n' | wc -l || echo "grep failed"
          
          echo "=== DETAILED BASE64 ANALYSIS ==="
          # Check if key length is valid for base64 (should be multiple of 4)
          KEY_LENGTH=${#TAURI_SIGNING_PRIVATE_KEY}
          REMAINDER=$((KEY_LENGTH % 4))
          echo "Key length: $KEY_LENGTH (remainder when divided by 4: $REMAINDER)"
          
          if [ $REMAINDER -ne 0 ]; then
            echo "‚ùå Key length is not a multiple of 4 - this is likely the problem!"
            PADDING_NEEDED=$((4 - REMAINDER))
            echo "Need to add $PADDING_NEEDED padding character(s) '='"
          fi
          
          echo "=== CHARACTER ANALYSIS AT PROBLEM OFFSET ==="
          if [ ${#TAURI_SIGNING_PRIVATE_KEY} -ge 464 ]; then
            echo "Last 10 characters of key:"
            echo "${TAURI_SIGNING_PRIVATE_KEY: -10}" | od -c
            echo "Characters 460-464 as hex:"
            echo "${TAURI_SIGNING_PRIVATE_KEY:460:4}" | xxd
            
            # Check what character 10 (newline) looks like in the key
            CHAR_AT_464=$(echo "${TAURI_SIGNING_PRIVATE_KEY:463:1}" | od -c)
            echo "Character at offset 464: $CHAR_AT_464"
          fi
          
          echo "=== ATTEMPTING TO FIX BASE64 PADDING ==="
          # Method 1: Add proper padding
          echo "Method 1: Add proper base64 padding..."
          PADDED_KEY="$TAURI_SIGNING_PRIVATE_KEY"
          if [ $REMAINDER -eq 1 ]; then
            PADDED_KEY="${TAURI_SIGNING_PRIVATE_KEY}==="
          elif [ $REMAINDER -eq 2 ]; then
            PADDED_KEY="${TAURI_SIGNING_PRIVATE_KEY}=="
          elif [ $REMAINDER -eq 3 ]; then
            PADDED_KEY="${TAURI_SIGNING_PRIVATE_KEY}="
          fi
          echo "Padded key length: ${#PADDED_KEY}"
          echo "Padded key ends with: ...${PADDED_KEY: -10}"
          
          # Method 2: Remove potentially corrupt ending and re-pad
          echo "Method 2: Truncate to valid base64 length and re-pad..."
          TRUNCATED_LENGTH=$((KEY_LENGTH - REMAINDER))
          TRUNCATED_KEY="${TAURI_SIGNING_PRIVATE_KEY:0:$TRUNCATED_LENGTH}"
          if [ $TRUNCATED_LENGTH -gt 0 ]; then
            # Add padding to make it multiple of 4
            case $((TRUNCATED_LENGTH % 4)) in
              1) CLEAN_KEY_2="${TRUNCATED_KEY}===" ;;
              2) CLEAN_KEY_2="${TRUNCATED_KEY}==" ;;
              3) CLEAN_KEY_2="${TRUNCATED_KEY}=" ;;
              *) CLEAN_KEY_2="$TRUNCATED_KEY" ;;
            esac
          else
            CLEAN_KEY_2="FAILED"
          fi
          echo "Truncated and padded key length: ${#CLEAN_KEY_2}"
          
          echo "=== TESTING CLEANED KEYS ==="
          
          # Test Method 1: Padded key
          if [ "$PADDED_KEY" != "FAILED" ] && [ ${#PADDED_KEY} -gt 100 ]; then
            echo "Testing padded key method..."
            echo "$PADDED_KEY" > "/tmp/padded_key.key"
            echo "test content padded" > "/tmp/test_padded.txt"
            
            if npx tauri signer sign "/tmp/test_padded.txt" -f "/tmp/padded_key.key" -p "$TAURI_SIGNING_PRIVATE_KEY_PASSWORD" 2>&1; then
              echo "‚úÖ PADDED KEY METHOD SUCCEEDED!"
              echo "üéØ USE THIS PADDED KEY IN GITHUB SECRETS:"
              echo "$PADDED_KEY"
              echo "üéØ END OF PADDED KEY"
            else
              echo "‚ùå Padded key method failed"
            fi
          else
            echo "Padded key is invalid"
          fi
          
          # Test Method 2: Truncated and re-padded key  
          if [ "$CLEAN_KEY_2" != "FAILED" ] && [ ${#CLEAN_KEY_2} -gt 100 ]; then
            echo "Testing truncated key method..."
            echo "$CLEAN_KEY_2" > "/tmp/truncated_key.key"
            echo "test content truncated" > "/tmp/test_truncated.txt"
            
            if npx tauri signer sign "/tmp/test_truncated.txt" -f "/tmp/truncated_key.key" -p "$TAURI_SIGNING_PRIVATE_KEY_PASSWORD" 2>&1; then
              echo "‚úÖ TRUNCATED KEY METHOD SUCCEEDED!"
              echo "üéØ USE THIS TRUNCATED KEY IN GITHUB SECRETS:"
              echo "$CLEAN_KEY_2"
              echo "üéØ END OF TRUNCATED KEY"
            else
              echo "‚ùå Truncated key method failed"
            fi
          else
            echo "Truncated key is invalid"
          fi
          
          echo "=== ORIGINAL KEY TEST (for comparison) ==="
          echo "$TAURI_SIGNING_PRIVATE_KEY" > /tmp/original_key.key
          echo "test content original" > /tmp/test_original.txt
          npx tauri signer sign /tmp/test_original.txt -f /tmp/original_key.key -p "$TAURI_SIGNING_PRIVATE_KEY_PASSWORD" 2>&1 || echo "Original key failed as expected"
          
          # Clean up
          rm -f /tmp/*_key*.key /tmp/test*.txt

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'ManyMany.dev v__VERSION__ (Debug Build)'
          releaseBody: |
            ## Debug Release v__VERSION__
            
            This is a debug build to test the signing and update system.
            
            **What we're testing:**
            - Proper code signing with corrected key pair
            - Automatic generation of latest.json with real signatures
            - End-to-end update functionality
            
            **Technical details:**
            - ARM-only build for Apple Silicon Macs
            - Enhanced logging for signing diagnostics
            - Version: __VERSION__
          releaseDraft: false
          prerelease: false
          args: --target aarch64-apple-darwin
          includeUpdaterJson: true

      - name: Debug build artifacts and signing results
        run: |
          echo "=== POST-BUILD ARTIFACT ANALYSIS ==="
          
          echo "üîç Searching for signature files..."
          find src-tauri/target -name "*.sig" -ls || echo "‚ùå No .sig files found"
          
          echo "üîç Searching for tar.gz files..."
          find src-tauri/target -name "*.tar.gz*" -ls
          
          echo "üîç Checking bundle directory structure..."
          find src-tauri/target -type f -name "*ManyMany*" | head -20
          
          echo "üîç Looking for any signing-related files..."
          find src-tauri/target -name "*sign*" -o -name "*.key" -o -name "*.pub" | head -10
          
          echo "üîç Directory structure of release bundle..."
          ls -la src-tauri/target/aarch64-apple-darwin/release/bundle/ || echo "Bundle directory not found"
          
          if [ -d "src-tauri/target/aarch64-apple-darwin/release/bundle/macos" ]; then
            echo "üìÅ macOS bundle contents:"
            ls -la src-tauri/target/aarch64-apple-darwin/release/bundle/macos/
          fi
